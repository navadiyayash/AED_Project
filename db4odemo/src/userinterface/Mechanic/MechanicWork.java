/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package userinterface.Mechanic;
//private JPanel container;

import Business.Enterprise.Enterprise;
import Business.Mechanic.Mechanic;
import Business.Organizations.MechanicOrg;
import Business.Organizations.Organizations;
import Business.UserAccount.UserAcc;
import java.awt.CardLayout;
import javax.swing.JPanel;
import Business.EcoSystem;
import Business.WorkQueue.BuyerCostWorkReq;
import Business.WorkQueue.BuyerVehicleWorkReq;
import Business.WorkQueue.SellerVehWorkReq;
import Business.WorkQueue.WorkRequest;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author saneel
 */
public class MechanicWork extends javax.swing.JPanel {

    /**
     * Creates new form MechanicWork
     */
    private Mechanic mechanic;
    private JPanel container;
    private MechanicOrg mechanicOrg;
    private UserAcc userAccount;
    private Enterprise enterprise;

    public MechanicWork(JPanel container, UserAcc userAccount, Organizations organization, Enterprise enterprise, EcoSystem business) 
        {
            initComponents();
            this.container = container;
            this.mechanicOrg = (MechanicOrg) organization;
            this.userAccount = userAccount;
            this.enterprise = enterprise;
            populateTable();
            populateCostTable();
        }

        /**
         * This method is called from within the constructor to initialize the
         * form. WARNING: Do NOT modify this code. The content of this method is
         * always regenerated by the Form Editor.
         */
//        @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tblBuyer = new javax.swing.JTable();
        btnAssign = new javax.swing.JButton();
        btnProcess = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblCost = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        btnBack = new javax.swing.JButton();
        btnCostAssign = new javax.swing.JButton();
        btnCostProcess = new javax.swing.JButton();

        tblBuyer.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Vehicle Seller", "Vehicle Type", "Vehicle Buyer", "Status", "Role"
            }
        ));
        jScrollPane1.setViewportView(tblBuyer);

        btnAssign.setText("Assign to Me");
        btnAssign.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAssignActionPerformed(evt);
            }
        });

        btnProcess.setText("Process");
        btnProcess.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnProcessActionPerformed(evt);
            }
        });

        tblCost.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Seller", "Vehicle", "Buyer", "Status"
            }
        ));
        jScrollPane2.setViewportView(tblCost);

        jLabel1.setText("Cost Estimation for Vehicle To both Buyer & Seller");

        jLabel2.setText("List of Vehicle Buyer's & Sellers in Our City :");

        btnBack.setText("<Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        btnCostAssign.setText("Assign to Me");
        btnCostAssign.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCostAssignActionPerformed(evt);
            }
        });

        btnCostProcess.setText("Process");
        btnCostProcess.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCostProcessActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(btnBack))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(165, 165, 165)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jScrollPane1)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 643, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel2)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(129, 129, 129)
                                .addComponent(btnAssign)
                                .addGap(97, 97, 97)
                                .addComponent(btnProcess))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(297, 297, 297)
                        .addComponent(btnCostAssign)
                        .addGap(97, 97, 97)
                        .addComponent(btnCostProcess)))
                .addContainerGap(188, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnBack)
                .addGap(34, 34, 34)
                .addComponent(jLabel2)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(29, 29, 29)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAssign)
                    .addComponent(btnProcess))
                .addGap(54, 54, 54)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnCostAssign)
                    .addComponent(btnCostProcess))
                .addContainerGap(73, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // TODO add your handling code here:
        container.remove(this);
        CardLayout layout = (CardLayout) container.getLayout();
        layout.previous(container);
    }//GEN-LAST:event_btnBackActionPerformed

    private void btnAssignActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAssignActionPerformed
        // TODO add your handling code here:
        int selectedRow = tblBuyer.getSelectedRow();

        if (selectedRow < 0){
            JOptionPane.showMessageDialog(null,"Please select one row!");
            return;
        }

        WorkRequest request = (WorkRequest)tblBuyer.getValueAt(selectedRow, 0);
        request.setReceiver(userAccount);
        request.setStatus("Awaiting"); //peniding, work in progress
        populateTable();
    }//GEN-LAST:event_btnAssignActionPerformed

    private void btnProcessActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnProcessActionPerformed
        // TODO add your handling code here:
        int selectedRow = tblBuyer.getSelectedRow();

        if (selectedRow < 0){
            JOptionPane.showMessageDialog(null,"Please select one row!");
            return;
        }

       // int column= 4;
        
        String buyer=tblBuyer.getValueAt(selectedRow, 4).toString();
        if(buyer.equalsIgnoreCase("New Owner")){
        BuyerVehicleWorkReq request = (BuyerVehicleWorkReq)tblBuyer.getValueAt(selectedRow, 0);
      
        request.setStatus("In Process");

        
        BuyerRequest buyerReqJPanel = new BuyerRequest(container, request);
        container.add("processWorkRequestJPanel", buyerReqJPanel);
        CardLayout layout = (CardLayout) container.getLayout();
        layout.next(container);
        
        }
        else
        {
        SellerVehWorkReq request1 = (SellerVehWorkReq)tblBuyer.getValueAt(selectedRow, 0);     
        request1.setStatus("Processing");
        
        VehicleSellerReq vehSellerReqJPanel1 = new VehicleSellerReq(container, request1);
        container.add("processWorkRequestJPanel", vehSellerReqJPanel1);
        CardLayout layout = (CardLayout) container.getLayout();
        layout.next(container);
        }
    }//GEN-LAST:event_btnProcessActionPerformed

    private void btnCostAssignActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCostAssignActionPerformed
        // TODO add your handling code here:
                        int selectedRow = tblCost.getSelectedRow();

        if (selectedRow < 0){
            JOptionPane.showMessageDialog(null,"Please select a row!");
            return;
        }

        WorkRequest wr = (WorkRequest)tblCost.getValueAt(selectedRow, 0);
        wr.setReceiver(userAccount);
        wr.setStatus("Awaiting");
        populateCostTable();
    }//GEN-LAST:event_btnCostAssignActionPerformed

    private void btnCostProcessActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCostProcessActionPerformed
        // TODO add your handling code here:
        int selectedRow = tblCost.getSelectedRow();
        if (selectedRow < 0){
            JOptionPane.showMessageDialog(null,"Please select a row!");
            return;
        }

        BuyerCostWorkReq request = (BuyerCostWorkReq)tblCost.getValueAt(selectedRow, 0);

        request.setStatus("Processing");

        EstimateCost processCostWorkRequestJPanel = new EstimateCost(container, request);
        container.add("processCostWorkRequestJPanel", processCostWorkRequestJPanel);
        CardLayout layout = (CardLayout) container.getLayout();
        layout.next(container);
    }//GEN-LAST:event_btnCostProcessActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAssign;
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnCostAssign;
    private javax.swing.JButton btnCostProcess;
    private javax.swing.JButton btnProcess;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable tblBuyer;
    private javax.swing.JTable tblCost;
    // End of variables declaration//GEN-END:variables
//
//    private void initComponents() {
////        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
//    }

    void populateTable() {
//        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
        DefaultTableModel model = (DefaultTableModel) tblBuyer.getModel();

        model.setRowCount(0);

        for (WorkRequest req : mechanicOrg.getWorkQueue().getWorkReqLst()) {
            Object[] row = new Object[5];
            row[0] = req;
            row[1] = req.getMsg();
            row[2] = req.getReceiver() == null ? null : req.getReceiver().getUser().getU_name();
            row[3] = req.getStatus();
            row[4] = req.getRole();

            model.addRow(row);
        }

    }

    void populateCostTable() {
//        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
     {
        DefaultTableModel model = (DefaultTableModel)tblCost.getModel();
        model.setRowCount(0);
       for(WorkRequest wreq:mechanicOrg.getCostEstimate().getWorkReqLst()){
        Object[] row = new Object[4];
            row[0] = wreq;
            row[1] = wreq.getMsg();
            row[2] = wreq.getReceiver() == null ? null : wreq.getReceiver().getUser().getU_name();
            row[3] = wreq.getStatus();
       //     row[4] = "??";
            model.addRow(row);        
        }      
    }
    }
}
